;;;;;;;;;;;;;;;;;;;;;;;;
; mtest test framework ;
;;;;;;;;;;;;;;;;;;;;;;;;

(def _mtest_tests '())

(defn _mtest_runtests (tests)
  (cond
    (= tests '()) nil
    else (let (test (first tests)
               othertests (rest tests)
               testname (first test)
               testfn (first (rest test))
               result (testfn))
           (begin
             (cond
               (= result 'PASS) (println ".")
               else (println
                      (concat
                        "" \newline
                        ">>>>>" \newline
                        "TEST FAILED: '" testname "'" \newline
                        result \newline
                        "<<<<<")))
             (_mtest_runtests othertests)))))

;;;;;;;;;; External API

;; (defmtest "Sample Test"
;;   pred1 pred2 predn...)
;; =>
;; (update! _mtest_tests
;;          (cons (list "Sample Test" (fn () (begin pred1 pred2 predn...)))
;;                _mtest_tests))
;;
(defmacro defmtest (name &rest preds)
  (list 'update! '_mtest_tests
    (list 'cons
      (list 'list name
        (list 'fn '()
          (cons 'begin preds)))
      '_mtest_tests)))

(defn mt= (actual expected)
  (if (= actual expected)
    'PASS
    (concat
      "EXPECTED: <" expected ">" \newline
      "ACTUAL: <" actual ">")))

(defn mtest-start ()
  (println "Running mtest tests...")
  (_mtest_runtests _mtest_tests)
  (println "Tests complete..."))