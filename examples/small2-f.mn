#|
Lisp-2 interpreter adapted from Chapter 2 of Christian Queinnec's Lisp in Small Pieces.
This interpreter implements a Lisp-2 dialect. 
|#

(load "examples/prelude.mn")
(load "examples/mtest.mn")

;-------------------- REPL --------------------

(defn wrong (&rest args)
    (apply println (cons "SMALL ERROR:" args)))

(defn repl ()
    (defn toplevel ()
        (let (line (trim-string (read-line)))
            (cond
                (= line ":q") (println "Exiting...")
                else (begin
                        (println (f.evaluate (read-string line) env.global fenv.global))
                        (toplevel)))))
    (toplevel))

;-------------------- Evaluation --------------------

(def *trace* false)

(defn f.evaluate (e env fenv)
    (if (atom? e)
        (cond
            (symbol? e) (lookup e env)
            (or (number? e) (string? e) (char? e) (boolean? e)) e
            else (wrong "Cannot eval:" (str e)))
        (if (empty? e)
            (wrong "Cannot eval empty list")
            (case (first e)
                'quote (frest e)
                'if    (if (not (= the-false-value
                                   (f.evaluate (get e 1) env fenv)))
                           (f.evaluate (get e 2) env fenv)
                           (f.evaluate (get e 3) env fenv))
                'begin (f.eprogn (rest e) env fenv)
                'set!  (update (get e 1)
                            env
                            (f.evaluate (get e 2) env fenv))
                'fn    (f.make-function
                            (get e 1)
                            (rest (rest e))
                            env
                            fenv)
                'function (cond (symbol? (get e 1)) (lookup (get e 1) fenv)
                                else (wrong "Incorrect function" (get e 1)))
                'flet (let (body (rest (rest e))
                            bindings (to-pairs (get e 1))
                            vars (map first bindings)
                            vals (map (fn (b) (get b 1)) bindings))
                        (begin
                            (println "FLET;e" e)
                            (println "FLET;body" body)
                            (println "FLET;bindings" bindings)
                            (println "FLET;vars" vars)
                            (println "FLET;vals" vals)
                        (f.eprogn
                            body
                            env
                            (extend
                                fenv
                                vars                                
                                (map (fn (v)
                                        (f.make-function
                                            (get v 1)
                                            (rest (rest v))
                                            env
                                            fenv))
                                    vals)))))
                else   (f.evaluate-application
                            (first e)
                            (f.evlis (rest e) env fenv)
                            env
                            fenv)))))

(defn f.eprogn (es env fenv)
    (if (empty? es)
        nil
        (if (empty? (rest es))
            (f.evaluate (first es) env fenv)
            (begin 
                (f.evaluate (first es) env fenv)
                (f.eprogn (rest es) env fenv)))))

(defn f.evlis (es env fenv)
    (if (empty? es)
        ()
        (cons (f.evaluate (first es) env fenv)
              (f.evlis (rest es) env fenv))))

;; Receives the unevaluated function-term, the evaluated arguments, and the two environments
(defn f.evaluate-application (f args env fenv)
    (cond
        (symbol? f)
            (invoke (lookup f fenv) args)
        (and (not (empty? f)) (= (first f) 'fn))
            (f.eprogn
                (rest (rest f))
                (extend env (first (rest f)) args)
                fenv)
        else   
            (wrong "Incorrect functional term" f)))

; TODO remove
(defn invoke (f args)
    (if (routine? f)
        (begin
            (if *trace*
                (println "Tracing, args:" args))
            (let (result (f args))
                (if *trace* (println "Tracing, result:" result))
                result))
        (wrong "Not a function" f)))

(defn f.make-function (vars body env.lexical fenv)
    (fn (vals)
        (f.eprogn body (extend env.lexical vars vals) fenv)))

;-------------------- Environment --------------------

(def env.init ())
(def fenv.init ())

(def env.global env.init)
(def fenv.global fenv.init)

(defn make-entry (var val)
    (list var (cell val)))

(defn entry-var (entry)
    (first entry))

(defn entry-val (entry)
    (first (rest entry)))

(defn extend (env vars vals)
    (cond
        (empty? vars)  (if (empty? vals)
                           env
                           (wrong "Too many values"))
        (symbol? vars) (cons (make-entry vars vals) env)
        (list? vars)   (if (empty? vals)
                           (wrong "Too few values")
                           (cons (make-entry (first vars) (first vals))
                                 (extend env (rest vars) (rest vals))))))

(defn lookup (id env)
    (if (empty? env)
        (wrong "No such binding:" id)
        (if (= (entry-var (first env)) id)
            (get-cell (entry-val (first env)))
            (lookup id (rest env)))))

(defn update (id env value)
    (if (empty? env)
        (wrong "No such binding:" id)
        (if (= (entry-var (first env)) id)
            (begin
                (set-cell! (entry-val (first env)) value)
                value)
            (update id (rest env) value))))

;-------------------- Primitives --------------------

(def the-true-value 42)
(def the-false-value 32123)

(defn definitial.f (name val)
    (update! fenv.global (cons (make-entry name val)
                               fenv.global)))

(defn definitial (name val)
    (update! env.global (cons (make-entry name val)
                               env.global)))

(defn defprimitive (name val arity)
    (definitial.f
        name
        (fn (args)
            (if (= arity (len args))
                (apply val args)
                (wrong "Incorrect arity" (list name args))))))

(definitial 'null ())
(definitial 't the-true-value)
(definitial 'f the-false-value)
(definitial.f 'list (fn (args) args))
(definitial.f 'funcall
    (fn (args)
        (if (> (len args) 1)
            (invoke (first args) (rest args))
            (wrong "Incorrect arity" 'funcall))))

(defprimitive 'cons cons 2)
(defprimitive 'car first 1)
(defprimitive 'cdr rest 1)
(defprimitive '+ + 2)
(defprimitive '- - 2)
(defprimitive 'eq? = 2)
(defprimitive '<
    (fn (a b) (if (< a b) the-true-value the-false-value))
    2)
(defprimitive 'apply invoke 2)

;-------------------- Helpers --------------------

(defn get (l n)
  (if (= n 0)
    (first l)
    (get (rest l) (- n 1))))

(defn routine? (n)
  (case (typeof n)
    'function true
    'primitive true
    else false))

;-------------------- Unit Tests --------------------

(defmtest "extend, with symbol"
  (mt=
    (extend () 'a '1)
    (list (list 'a (cell 1)))
    ))

(defmtest "extend, with list"
  (mt=
    (extend () '(a b c) '(1 2 3))
    (list (list 'a (cell 1))
          (list 'b (cell 2))
          (list 'c (cell 3)))
    ))

;-------------------- Integration Tests --------------------

(defn evaluate (exp env)
    (f.evaluate exp env fenv.global))

(defmtest "atom"
  (mt=
    (evaluate 1 ())
    1))

(defmtest "begin"
  (mt=
    (evaluate '(begin 1 2) ())
    2)
  (mt=
    (evaluate '(begin) ())
    nil))

(defmtest "symbol value"
  (mt=
    (evaluate 'foo (list (list 'foo (cell 42))))
    42)
    )

(defmtest "set!"
  (mt=
    (evaluate '(set! foo 1776) (list (list 'foo (cell 42))))
    1776)
  (mt=
    (evaluate
        '(begin
            (set! bar 5)
            bar)
        (list (list 'bar (cell 100))))
    5)
    )


(defmtest "if"
  (mt=
    (evaluate '(if true 1 2) ())
    1))

(defmtest "fn"
    (mt=
        (evaluate '((fn (a b) a) 1 2) ())
        1))

(defmtest "lexical scoping"
    (mt=
        (evaluate
            '((fn (x)
                ((fn (y)
                    (list x y)) 100)) 200)
            env.global)
        (list 200 100)
        ))

(defmtest "null"
    (mt=
        (evaluate 'null env.global)
        ()))

(defmtest "cons"
    (mt=
        (evaluate '(function cons) env.global)
        (list 1))
    (mt=
        (evaluate '(cons 1 (quote ())) env.global)
        (list 1))
    )

(defmtest "<"
    (mt=
        (evaluate '(< 1 0) env.global)
        the-false-value))

(defmtest "list"
    (mt=
        (evaluate '(list 1 2 3 4) env.global)
        (list 1 2 3 4)))

(defmtest "functions as values"
    (mt=
        (evaluate '(funcall (if t (function +) (function -)) 3 4) env.global)
        7))

(defmtest "flet simple"
    (mt=
        (evaluate
            '(flet (foo (fn (a) (+ a 1)))
                (foo 10))
            env.global)
        11))

    #|
(defmtest "flet simple"
    (mt=
        (evaluate
            '(flet (foo +)
                (foo 5 6)
                (foo 7 8))
            env.global)
        43))
    |#

#|
(defmtest "Evaluate 'apply'"
    (mt=
        (evaluate '(apply + (list 1 2)) env.global)
        3))

(defmtest "Evaluate ="
  (mt=
    (evaluate '(= 45 45) ())
    2))
|#

(mtest-start)