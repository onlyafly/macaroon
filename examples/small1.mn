#|
Lisp interpreter adapted from Chapter 1 of Christian Queinnec's Lisp in Small Pieces
|#

(load "examples/prelude.mn")
(load "examples/mtest.mn")

(defn get (l n)
  (if (= n 0)
    (first l)
    (get (rest l) (- n 1))))

(defn wrong (&rest args)
    (println "DEBUG wrong:" args)
    (apply panic args))

(def the-false-value false)

(defn evaluate (e env)
    (if (atom? e)
        (cond
            (symbol? e) (s_lookup e env)
            (or (number? e) (string? e) (char? e) (boolean? e)) e
            else (wrong (concat "Cannot eval: " (str e))))
        (case (first e)
            'quote (frest e)
            'if    (if (not (= (evaluate (get e 1) env) the-false-value))
                     (evaluate (get e 2) env)
                     (evaluate (get e 3) env))
            'begin (s_eprogn (rest e) env)
            'set!  (s_update (get e 1) env (evaluate (get e 2) env))
            'fn    (s_make-function (get e 1)
                                    (rest (rest e))
                                    env)
            else   (s_invoke
                     (evaluate (first e) env)
                     (s_evlis (rest e) env)))))

(defn s_eprogn (es env)
    ;DEBUG (println "s_eprogn:" es)
    (if (not (empty? es))
        (if (not (empty? (rest es)))
            (begin 
                (evaluate (first es) env)
                (s_eprogn (rest es) env))
            (evaluate (first es) env))
        nil
        ))

;; TODO: Not yet tested
(defn s_evlis (es env)
    (if (empty? es)
        ()
        (cons (evaluate (first es) env)
              (s_evlis (rest es) env))))

(defn s_lookup (id env)
    (if (empty? env)
        (wrong "No such binding:" id)
        (if (= (get (first env) 0) id)
            (get (first env) 1)
            (s_lookup id (rest env)))))

(defn s_update (id env value)
    (if (empty? env)
        (wrong "No such binding:" id)
        (if (= (get (first env) 0) id)
            (begin
                (update-element! (first env) 1 value)
                value)
            (s_update id (rest env) value))))

(defmtest "Evaluate atom"
  (mt=
    (evaluate 1 ())
    1))

(defmtest "Evaluate begin"
  (mt=
    (evaluate '(begin 1 2) ())
    2)
  (mt=
    (evaluate '(begin) ())
    nil))

(defmtest "Evaluate a symbol"
  (mt=
    (evaluate 'foo '((foo 42)))
    42)
    )

(defmtest "Evaluate: set!"
  (mt=
    (evaluate '(set! foo 1776) '((foo 42)))
    1776)
    )

#|
(defmtest "Evaluate if #1"
  (mt=
    (evaluate '(if (= 45 45) 1 2) ())
    2))

(defmtest "Evaluate ="
  (mt=
    (evaluate '(= 45 45) ())
    2))
|#

(mtest-start)